// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VL.Challenge.Storage.EFCore;

#nullable disable

namespace VL.Challenge.Storage.Migrations
{
    [DbContext(typeof(ChallengeDbContext))]
    [Migration("20231116215005_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VL.Challenge.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("VL.Challenge.Domain.Entities.VLTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Task 1 Description",
                            EndTime = new DateTimeOffset(new DateTime(2023, 11, 17, 0, 20, 5, 758, DateTimeKind.Unspecified).AddTicks(3713), new TimeSpan(0, 2, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2023, 11, 17, 0, 0, 5, 758, DateTimeKind.Unspecified).AddTicks(3653), new TimeSpan(0, 2, 0, 0, 0)),
                            Subject = "Task 1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Task 2 Description",
                            EndTime = new DateTimeOffset(new DateTime(2023, 11, 18, 0, 20, 5, 758, DateTimeKind.Unspecified).AddTicks(3733), new TimeSpan(0, 2, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2023, 11, 18, 0, 0, 5, 758, DateTimeKind.Unspecified).AddTicks(3718), new TimeSpan(0, 2, 0, 0, 0)),
                            Subject = "Task 2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new DateTimeOffset(new DateTime(2023, 11, 16, 23, 30, 5, 758, DateTimeKind.Unspecified).AddTicks(3737), new TimeSpan(0, 2, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2023, 11, 16, 23, 20, 5, 758, DateTimeKind.Unspecified).AddTicks(3735), new TimeSpan(0, 2, 0, 0, 0)),
                            Subject = "Task 3",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("VL.Challenge.Domain.Entities.VLTask", b =>
                {
                    b.HasOne("VL.Challenge.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VL.Challenge.Domain.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
